# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-05-12 08:10
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import rightmove.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='NearestStation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance_mi', models.FloatField()),
                ('station', models.CharField(max_length=64)),
                ('station_type', models.IntegerField(choices=[(b'national rail', 1), (b'tram', 2), (b'underground', 3), (b'overground', 4)])),
            ],
            bases=(models.Model, rightmove.models.PropertySerializerMixin),
        ),
        migrations.CreateModel(
            name='PropertyBase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accessed', models.DateTimeField(auto_created=True, help_text=b'Timestamp for access')),
                ('requester_id', models.CharField(max_length=32)),
                ('date_listed', models.DateField(blank=True, null=True)),
                ('property_type', models.IntegerField(choices=[(1, b'residential property for sale'), (2, b'residential property to rent'), (3, b'residential new build property for sale'), (4, b'overseas property for sale'), (5, b'commercial property for sale'), (6, b'commercial property to rent')])),
                ('key_features', models.TextField(blank=True, null=True)),
                ('full_description', models.TextField(blank=True, null=True)),
                ('agent_name', models.CharField(max_length=256)),
                ('agent_address', models.CharField(max_length=256)),
                ('agent_tel', models.CharField(max_length=20)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('address_string', models.CharField(max_length=256)),
                ('qualifier', models.CharField(max_length=64)),
                ('status', models.CharField(blank=True, max_length=32, null=True)),
            ],
            bases=(models.Model, rightmove.models.PropertySerializerMixin),
        ),
        migrations.CreateModel(
            name='PropertySitemap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accessed', models.DateTimeField(auto_created=True, help_text=b'Timestamp for access')),
                ('url', models.URLField(unique=True)),
                ('status_code', models.IntegerField()),
                ('last_modified', models.DateField(help_text=b'Last modified date according to the sitemap XML')),
                ('content', models.TextField()),
                ('urls_created', models.BooleanField(default=False, help_text=b'Have URLs been created/updated for this entry?')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deactivated', models.DateTimeField(auto_created=True, help_text=b'Timestamp for deactivation', null=True)),
                ('created', models.DateTimeField(auto_created=True, help_text=b'Timestamp for creation')),
                ('url', models.URLField(unique=True)),
                ('property_type', models.IntegerField(choices=[(1, b'residential property for sale'), (2, b'residential property to rent'), (3, b'residential new build property for sale'), (4, b'overseas property for sale'), (5, b'commercial property for sale'), (6, b'commercial property to rent')])),
                ('last_known_status', models.IntegerField(blank=True, choices=[(1, b'active'), (2, b'removed'), (3, b'suspended'), (4, b'not found')], null=True)),
                ('last_accessed', models.DateTimeField(help_text=b'Timestamp for previous access', null=True)),
                ('last_updated', models.DateTimeField(help_text=b'Timestamp for previous update', null=True)),
                ('last_status_code', models.IntegerField(help_text=b'Status code obtained on previous update', null=True)),
                ('consecutive_failed_attempts', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyForSale',
            fields=[
                ('propertybase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rightmove.PropertyBase')),
                ('is_retirement', models.BooleanField(default=False)),
                ('n_bed', models.IntegerField()),
                ('asking_price', models.IntegerField()),
                ('building_type', models.IntegerField(choices=[(1, b'Flat/apartment'), (2, b'Bungalow'), (3, b'Studio flat'), (4, b'Retirement property'), (5, b'Maisonette'), (6, b'Town house'), (7, b'House'), (8, b'Country house'), (9, b'Penthouse'), (10, b'Villa'), (11, b'Lodge')])),
                ('building_situation', models.IntegerField(choices=[(1, b'Detached'), (2, b'Semi detached'), (3, b'End terrace'), (4, b'Mid terrace'), (5, b'Link detached'), (6, b'Flat'), (7, b'Ground floor')])),
                ('tenure_type', models.CharField(blank=True, max_length=32, null=True)),
            ],
            bases=('rightmove.propertybase',),
        ),
        migrations.AddField(
            model_name='propertybase',
            name='url',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rightmove.PropertyUrl'),
        ),
        migrations.AddField(
            model_name='neareststation',
            name='property',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rightmove.PropertyBase'),
        ),
    ]
